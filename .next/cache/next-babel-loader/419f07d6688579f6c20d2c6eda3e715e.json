{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Link from \"next/link\";\nimport \"../../public/static/css/allposts.scss\";\nimport Navbar from \"../comps/navbar\";\n\nvar All = function All(posts) {\n  var _useState = useState([]),\n      allPosts = _useState[0],\n      setPosts = _useState[1];\n\n  useEffect(function () {\n    setPosts([posts.json][0]);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Navbar, null), __jsx(\"div\", {\n    className: \"allMother\"\n  }, __jsx(\"h1\", {\n    className: \"allHead\"\n  }, \"All Posts\"), __jsx(\"div\", {\n    className: \"postGrid\"\n  }, console.log(\"below is line 21\"), console.log(typeof allPosts), allPosts.length !== 0 ? allPosts.reverse().map(function (post) {\n    return __jsx(Link, {\n      key: post.uid,\n      href: \"/blog/\".concat(post.uid)\n    }, __jsx(\"div\", {\n      key: post.uid,\n      className: \"blogPost\"\n    }, __jsx(\"h3\", {\n      className: \"blogTitle\"\n    }, post.title), __jsx(\"div\", {\n      className: \"dateTimeDiv\"\n    }, __jsx(\"p\", {\n      className: \"blogTime\"\n    }, post.time_created), __jsx(\"p\", {\n      className: \"blogDate\"\n    }, post.date_created)), __jsx(\"hr\", {\n      className: \"blogsHr\"\n    }), post.blog_text.length > 150 ? __jsx(\"p\", {\n      className: \"blogText\"\n    }, post.blog_text.slice(0, 150), \"...\") : __jsx(\"p\", {\n      className: \"blogText\"\n    }, post.blog_text)));\n  }) : __jsx(\"div\", null, __jsx(\"h3\", null, \"No posts yet\")))));\n};\n\nAll.getInitialProps = function _callee(ctx) {\n  var res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://h3-staffing.now.sh/api/blog/all\"));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", {\n            json: json\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default All;","map":null,"metadata":{},"sourceType":"module"}