{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext, useContext } from \"react\"; // Make a new context\n\nexport const UserContext = createContext();\nexport const useUserProv = useContext(UserContext); // Create provider component\n\nexport class UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      statusUrl: \"\"\n    });\n  }\n\n  componentDidMount() {\n    if (false) {\n      this.setState({\n        statusUrl: \"http://localhost:3000\"\n      });\n    } else {\n      this.setState({\n        statusUrl: \"https://https://h3-staffing.now.sh\"\n      });\n    }\n  }\n\n  render() {\n    const {\n      statusUrl\n    } = this.state;\n    return __jsx(UserContext.Provider, {\n      value: statusUrl //     {\n      //     state: this.state,\n      //     getStatusUrl: () => {\n      //         if(process.env.NODE_ENV === \"development\") {\n      //             this.setState({ statusUrl: \"http://localhost:3000\" })\n      //         } else {\n      //             this.setState({ statusUrl: \"https://https://h3-staffing.now.sh\" })\n      //         }\n      //     }\n      // }\n\n    }, this.props.children);\n  }\n\n} // const UserConsumer = UserContext.Consumer;\n// export default UserProvider;\n// export { UserConsumer };","map":null,"metadata":{},"sourceType":"module"}