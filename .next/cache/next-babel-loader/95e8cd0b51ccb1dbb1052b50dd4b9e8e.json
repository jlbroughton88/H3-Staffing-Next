{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, createContext, useContext } from \"react\"; // Make a new context\n\nexport var UserContext = createContext();\nexport var useUserProv = useContext(UserContext); // Create provider component\n\nexport var UserProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserProvider, _Component);\n\n  function UserProvider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      statusUrl: \"\"\n    });\n\n    return _this;\n  }\n\n  _createClass(UserProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (false) {\n        this.setState({\n          statusUrl: \"http://localhost:3000\"\n        });\n      } else {\n        this.setState({\n          statusUrl: \"https://https://h3-staffing.now.sh\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var statusUrl = this.state.statusUrl;\n      return __jsx(UserContext.Provider, {\n        value: statusUrl //     {\n        //     state: this.state,\n        //     getStatusUrl: () => {\n        //         if(process.env.NODE_ENV === \"development\") {\n        //             this.setState({ statusUrl: \"http://localhost:3000\" })\n        //         } else {\n        //             this.setState({ statusUrl: \"https://https://h3-staffing.now.sh\" })\n        //         }\n        //     }\n        // }\n\n      }, this.props.children);\n    }\n  }]);\n\n  return UserProvider;\n}(Component); // const UserConsumer = UserContext.Consumer;\n// export default UserProvider;\n// export { UserConsumer };","map":null,"metadata":{},"sourceType":"module"}