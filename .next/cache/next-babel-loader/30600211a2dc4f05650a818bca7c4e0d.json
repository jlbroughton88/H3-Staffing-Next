{"ast":null,"code":"var _jsxFileName = \"/Users/JacobBroughton/coding/work/H3-Staffing-Next/pages/comps/contexts/envProvider.js\";\nvar __jsx = React.createElement;\nimport React, { Component, createContext, useContext } from \"react\"; // Make a new context\n\nexport const UserContext = createContext();\nexport const useEnv = () => useContext(UserContext); // Create provider component\n// export class UserProvider extends Component {\n//     state = {\n//         statusUrl: \"\"\n//     }\n//     componentDidMount() {\n//         if(process.env.NODE_ENV === \"development\") {\n//             this.setState({ statusUrl: \"http://localhost:3000\" })\n//         } else {\n//             this.setState({ statusUrl: \"https://https://h3-staffing.now.sh\" })\n//         }\n//     }\n//     render() {\n//         const { statusUrl } = this.state;\n//         return (\n//             <UserContext.Provider\n//                 value={ statusUrl}\n//             >\n//                 {this.props.children}\n//             </UserContext.Provider>\n//         )\n//     }\n// }\n\nconst EnvProvider = props => {\n  const [statusUrl, setStatusUrl] = useState(\"\");\n  useEffect(() => {\n    if (true) {\n      setStatusUrl(\"http://localhost:3000\");\n    } else {\n      setStatusUrl(\"https://word-processor.now.sh\");\n    }\n  }, []);\n  return __jsx(EnvContext.Provider, {\n    value: statusUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/JacobBroughton/coding/work/H3-Staffing-Next/pages/comps/contexts/envProvider.js"],"names":["React","Component","createContext","useContext","UserContext","useEnv","EnvProvider","props","statusUrl","setStatusUrl","useState","useEffect","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,UAA1C,QAA4D,OAA5D,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAGF,aAAa,EAAjC;AACP,OAAO,MAAMG,MAAM,GAAG,MAAMF,UAAU,CAACC,WAAD,CAA/B,C,CAEP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,WAAW,GAAGC,KAAK,IAAI;AAEzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,cAA2C;AACvCF,MAAAA,YAAY,CAAC,uBAAD,CAAZ;AACH,KAFD,MAEO;AACHA,MAAAA,YAAY,CAAC,+BAAD,CAAZ;AACH;AACJ,GANQ,EAMN,EANM,CAAT;AAQA,SACI,MAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAED,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACK,QADX,CADJ;AAKH,CAjBD","sourcesContent":["import React, { Component, createContext, useContext } from \"react\";\n\n// Make a new context\nexport const UserContext = createContext();\nexport const useEnv = () => useContext(UserContext)\n\n// Create provider component\n// export class UserProvider extends Component {\n//     state = {\n//         statusUrl: \"\"\n//     }\n\n//     componentDidMount() {\n//         if(process.env.NODE_ENV === \"development\") {\n//             this.setState({ statusUrl: \"http://localhost:3000\" })\n//         } else {\n//             this.setState({ statusUrl: \"https://https://h3-staffing.now.sh\" })\n//         }\n//     }\n    \n//     render() {\n\n//         const { statusUrl } = this.state;\n//         return (\n//             <UserContext.Provider\n//                 value={ statusUrl}\n//             >\n//                 {this.props.children}\n//             </UserContext.Provider>\n//         )\n//     }\n// }\n\nconst EnvProvider = props => {\n\n    const [statusUrl, setStatusUrl] = useState(\"\");\n\n    useEffect(() => {\n        if(process.env.NODE_ENV === \"development\") {\n            setStatusUrl(\"http://localhost:3000\")\n        } else {\n            setStatusUrl(\"https://word-processor.now.sh\")\n        }\n    }, [])\n\n    return (\n        <EnvContext.Provider value={statusUrl}>\n            {props.children}\n        </EnvContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}